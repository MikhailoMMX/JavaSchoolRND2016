Процесс разработки, методологии и инструменты.

Водопадная модель:
Требования, проектирование, реализация, тестирование, инсталляция, поддержка

Унифициорованный процесс (UP)
Rational Unified Process - вариация от компании Rational.
Введены рабочие потоки, предыдущие процессы идут в некоторой степени параллельно.
Фазы: начало, уточнение, построение, внедрение.
Более адекватный, чем водопадная модель.

Диаграмма Ганта
Инструмент для планирования проекта.

Плюсы:
    Детальная документация
    Согласованные требования
    Можно набрать команду под конкретные небольшие команды и нанять не очеть профессиональных разработчиков
    Хорошо выраженные точки входа и выхода каждой фазы

Минусы
    На начальном этапе клиенту трудно сформулировать требования
    Медленный старт
    Фиксированные условия, трудно изменить
    Клиенту невозможно оценить ПО до окончания его реализации
    Недостаток гибкости, невозможность сменить направление

Обычно все это не работает...

========================================

Agile - гибкая методология

Делает упор на непосредственное общение с клиентом. Основные идеи:
    Люди и взаимодействие важнее процессов и инструментов
    Работающий продукт важнее исчерпывающей документации
    Сотрудничество с заказчиком важнее согласования условий контракта
    Готовность к изменениям важнее следования первоначальному плану

Самоорганизующиеся кросс-функциональные команды, имеют максимальные полномочия для удовлетворения потребностей клиента.
Автоматизация внедрения, гибкость разработки и поддерживающих процессов.

SCRUM
Небольшие команды из специалистов разного профиля обычно выдают лучшие результаты.

Процесс делится на Sprint'ы, до месяца, состоят из Daily Sprint'ов.
Перед стартом - резерв проекта (Product Backlog), из него выбирается резерв Sprint'а с наибольшим приоритетом
в основном они все реализуются и на выходе получится работающее ПО с новыми возможностями.
При этом параллельно можно добавлять в Резерв новые требования.

3 базовые роли (свиньи)
    Product Owner (связующее звено между заказчиком и командой разработки)
    Scrum Master (служащий лидер, помогает команде организовать работу команды)
    Команда разработки (DT)

DT - самоорганизуется, никто не может указывать КАК Product Backlog преобразуется в работающий продукт.
Многофункциональная, обладает навыками для выпуска работающего проекта.
За выполняемую работу отвечает вся команда.
Рекомендуемый объем команды 7 +/- 2 человека.

Дополнительные роли (Куры)
    Пользователи
    Клиенты, продавцы
    Управляющие
    Эксперты-консультанты

Цикл Деминга PDCA (Plan-Do-Check-Act)
Диаграмма сгорания задач - для контроля. BurnDown Chart.

Плюсы:
    Ориентирован на клиента
    Адаптивен
    Прост в изучении
    Упор на самоорганизующуюся, многофункциональную команды

Минусы
    Жесткие ограничения на работу команды в рамках спринта
    Сложен во внедрении
    Высокие затраты на формирование команды
    Неопределенность. Количество спринтов неограничено, поэтому сложно поставить конечную дату в проекте.

Шаги разработки ПО:
1. Выбор решения
2. Проработка архитектуры
3. Создание проекта
4. Описание интерфейсов
5. Написание кода
6. Написание тестов
7. Pull Requests
8. Релиз/Документация
9. Установка

Git push
@
Go home

Continuous Integration
Методология разработки, выполняются частые автоматизированные сборки для выявления интеграционных проблем.
Работает на Continuous Integration Server (CIS) (Jenkins)

Pull Request
Запрос на включение (сделанных мной изменений).

Должен быть:
    Хорошо оформлен и описан
    Один баг - один PR. Одна фича - один PR.
    Должен соблюдать стиль кодирования проекта.

Перед принятием PR:
    Code Review
    тесты
    Sonar Qube
    Code Style
Дальше
    Resolve conflict
    успешная сборка
    2 approve
    покрытие тестами >70%

Continuous Delivery
Продолжение CI - непрерывная поставка продукта пользователю

Release Candidate
"Нельзя просто взять и выкатить релиз"

Sonar - автоматический Code Review
Статический анализ
Нотификации Stash
Быстрые ссылки на проблему
Определяет циклические зависимости
Машина времени
Показатели:
    Технический долг (в днях). Сколько дней работать, чтобы исправить
    Coverage - покрытие тестами
    Дублирование кода
    Структура/статистика кода

Литература:

Джефф Сазерленд - SCRUM
Джим Арлоу Айла Нейштадт UML2 и унифицированный процесс
https://jenkins.io

Домашнее задание
Установить Sonar
Снять статистику своего проекта, сформировать скриншоты с пояснениями